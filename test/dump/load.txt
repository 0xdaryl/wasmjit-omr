# FLAGS: -dv
(module
  (func
    (i32.load (i32.const 0))
    (i64.load (i32.const 0))
    (i32.load8_s (i32.const 0))
    (i32.load16_s (i32.const 0))
    (i32.load8_u (i32.const 0))
    (i32.load16_u (i32.const 0))
    (f32.load (i32.const 0))
    (f64.load (i32.const 0))))
# STDOUT:
0000000: 00                                         ; mem size log 2
0000001: 01                                         ; export mem
0000002: 0000                                       ; num globals
0000004: 0100                                       ; num funcs
0000006: 0000                                       ; num data segments
; function header 0
0000008: 00                                         ; func num args
0000009: 00                                         ; func result type
000000a: 0000 0000                                  ; func name offset
000000e: 0000 0000                                  ; func code start offset
0000012: 0000 0000                                  ; func code end offset
0000016: 0000                                       ; num local i32
0000018: 0000                                       ; num local i64
000001a: 0000                                       ; num local f32
000001c: 0000                                       ; num local f64
000001e: 00                                         ; export func
000001f: 00                                         ; func external
; function data 0
000000e: 2000 0000                                  ; FIXUP func code start offset
0000020: 03                                         ; OPCODE_BLOCK
0000021: 00                                         ; toplevel block num expressions
0000022: 20                                         ; OPCODE_I32_LOAD_I32
0000023: 06                                         ; load access byte
0000024: 10                                         ; OPCODE_I8_CONST
0000025: 00                                         ; u8 literal
0000026: 21                                         ; OPCODE_I64_LOAD_I32
0000027: 07                                         ; load access byte
0000028: 10                                         ; OPCODE_I8_CONST
0000029: 00                                         ; u8 literal
000002a: 20                                         ; OPCODE_I32_LOAD_I32
000002b: 04                                         ; load access byte
000002c: 10                                         ; OPCODE_I8_CONST
000002d: 00                                         ; u8 literal
000002e: 20                                         ; OPCODE_I32_LOAD_I32
000002f: 05                                         ; load access byte
0000030: 10                                         ; OPCODE_I8_CONST
0000031: 00                                         ; u8 literal
0000032: 20                                         ; OPCODE_I32_LOAD_I32
0000033: 00                                         ; load access byte
0000034: 10                                         ; OPCODE_I8_CONST
0000035: 00                                         ; u8 literal
0000036: 20                                         ; OPCODE_I32_LOAD_I32
0000037: 01                                         ; load access byte
0000038: 10                                         ; OPCODE_I8_CONST
0000039: 00                                         ; u8 literal
000003a: 22                                         ; OPCODE_F32_LOAD_I32
000003b: 00                                         ; load access byte
000003c: 10                                         ; OPCODE_I8_CONST
000003d: 00                                         ; u8 literal
000003e: 23                                         ; OPCODE_F64_LOAD_I32
000003f: 00                                         ; load access byte
0000040: 10                                         ; OPCODE_I8_CONST
0000041: 00                                         ; u8 literal
0000021: 08                                         ; FIXUP toplevel block num expressions
0000012: 4200 0000                                  ; FIXUP func code end offset
; names
0000000: 0001 0000 0100 0000 0000 0000 0000 2000  .............. .
0000010: 0000 4200 0000 0000 0000 0000 0000 0000  ..B.............
0000020: 0308 2006 1000 2107 1000 2004 1000 2005  .. ...!... ... .
0000030: 1000 2000 1000 2001 1000 2200 1000 2300  .. ... ..."...#.
0000040: 1000                                     ..
