;;; FLAGS: -dv
(module
  (func
    (i32.add
      (i32.sub
        (i32.mul
          (i32.div_s
            (i32.div_u
              (i32.rem_s
                (i32.rem_u
                  (i32.and
                    (i32.or
                      (i32.xor
                        (i32.shl
                          (i32.shr_u
                            (i32.shr_s
                              (i32.rotl
                                (i32.rotr
                                  (i32.const 0)
                                  (i32.const 0))
                                (i32.const 0))
                              (i32.const 0))
                            (i32.const 0))
                          (i32.const 0))
                        (i32.const 0))
                      (i32.const 0))
                    (i32.const 0))
                  (i32.const 0))
                (i32.const 0))
              (i32.const 0))
            (i32.const 0))
          (i32.const 0))
        (i32.const 0))
      (i32.const 0))

    (i64.add
      (i64.sub
        (i64.mul
          (i64.div_s
            (i64.div_u
              (i64.rem_s
                (i64.rem_u
                  (i64.and
                    (i64.or
                      (i64.xor
                        (i64.shl
                          (i64.shr_u
                            (i64.shr_s
                              (i64.rotl
                                (i64.rotr
                                  (i64.const 0)
                                  (i64.const 0))
                                (i64.const 0))
                              (i64.const 0))
                            (i64.const 0))
                          (i64.const 0))
                        (i64.const 0))
                      (i64.const 0))
                    (i64.const 0))
                  (i64.const 0))
                (i64.const 0))
              (i64.const 0))
            (i64.const 0))
          (i64.const 0))
        (i64.const 0))
      (i64.const 0))

    (f32.add
      (f32.sub
        (f32.mul
          (f32.div
            (f32.min
              (f32.max
                (f32.copysign
                  (f32.const 0)
                  (f32.const 0))
                (f32.const 0))
              (f32.const 0))
            (f32.const 0))
          (f32.const 0))
        (f32.const 0))
      (f32.const 0))

    (f64.add
      (f64.sub
        (f64.mul
          (f64.div
            (f64.min
              (f64.max
                (f64.copysign
                  (f64.const 0)
                  (f64.const 0))
                (f64.const 0))
              (f64.const 0))
            (f64.const 0))
          (f64.const 0))
        (f64.const 0))
      (f64.const 0))

))

(;; STDOUT ;;;
0000000: 0061 736d                                  ; WASM_BINARY_MAGIC
0000004: 0b00 0000                                  ; WASM_BINARY_VERSION
; section "type"
0000008: 04                                         ; string length
0000009: 7479 7065                                  ; section id: "type"
000000d: 00                                         ; section size (guess)
000000e: 01                                         ; num types
; type 0
000000f: 40                                         ; function form
0000010: 00                                         ; num params
0000011: 00                                         ; num results
000000d: 04                                         ; FIXUP section size
; section "function"
0000012: 08                                         ; string length
0000013: 6675 6e63 7469 6f6e                        ; section id: "function"
000001b: 00                                         ; section size (guess)
000001c: 01                                         ; num functions
000001d: 00                                         ; function 0 signature index
000001b: 02                                         ; FIXUP section size
; section "code"
000001e: 04                                         ; string length
000001f: 636f 6465                                  ; section id: "code"
0000023: 00                                         ; section size (guess)
0000024: 01                                         ; num functions
; function body 0
0000025: 00                                         ; func body size (guess)
0000026: 00                                         ; local decl count
0000027: 10                                         ; OPCODE_I32_CONST
0000028: 00                                         ; i32 literal
0000029: 10                                         ; OPCODE_I32_CONST
000002a: 00                                         ; i32 literal
000002b: b6                                         ; OPCODE_I32_ROTR
000002c: 10                                         ; OPCODE_I32_CONST
000002d: 00                                         ; i32 literal
000002e: b7                                         ; OPCODE_I32_ROTL
000002f: 10                                         ; OPCODE_I32_CONST
0000030: 00                                         ; i32 literal
0000031: 4c                                         ; OPCODE_I32_SHR_S
0000032: 10                                         ; OPCODE_I32_CONST
0000033: 00                                         ; i32 literal
0000034: 4b                                         ; OPCODE_I32_SHR_U
0000035: 10                                         ; OPCODE_I32_CONST
0000036: 00                                         ; i32 literal
0000037: 4a                                         ; OPCODE_I32_SHL
0000038: 10                                         ; OPCODE_I32_CONST
0000039: 00                                         ; i32 literal
000003a: 49                                         ; OPCODE_I32_XOR
000003b: 10                                         ; OPCODE_I32_CONST
000003c: 00                                         ; i32 literal
000003d: 48                                         ; OPCODE_I32_OR
000003e: 10                                         ; OPCODE_I32_CONST
000003f: 00                                         ; i32 literal
0000040: 47                                         ; OPCODE_I32_AND
0000041: 10                                         ; OPCODE_I32_CONST
0000042: 00                                         ; i32 literal
0000043: 46                                         ; OPCODE_I32_REM_U
0000044: 10                                         ; OPCODE_I32_CONST
0000045: 00                                         ; i32 literal
0000046: 45                                         ; OPCODE_I32_REM_S
0000047: 10                                         ; OPCODE_I32_CONST
0000048: 00                                         ; i32 literal
0000049: 44                                         ; OPCODE_I32_DIV_U
000004a: 10                                         ; OPCODE_I32_CONST
000004b: 00                                         ; i32 literal
000004c: 43                                         ; OPCODE_I32_DIV_S
000004d: 10                                         ; OPCODE_I32_CONST
000004e: 00                                         ; i32 literal
000004f: 42                                         ; OPCODE_I32_MUL
0000050: 10                                         ; OPCODE_I32_CONST
0000051: 00                                         ; i32 literal
0000052: 41                                         ; OPCODE_I32_SUB
0000053: 10                                         ; OPCODE_I32_CONST
0000054: 00                                         ; i32 literal
0000055: 40                                         ; OPCODE_I32_ADD
0000056: 11                                         ; OPCODE_I64_CONST
0000057: 00                                         ; i64 literal
0000058: 11                                         ; OPCODE_I64_CONST
0000059: 00                                         ; i64 literal
000005a: b8                                         ; OPCODE_I64_ROTR
000005b: 11                                         ; OPCODE_I64_CONST
000005c: 00                                         ; i64 literal
000005d: b9                                         ; OPCODE_I64_ROTL
000005e: 11                                         ; OPCODE_I64_CONST
000005f: 00                                         ; i64 literal
0000060: 67                                         ; OPCODE_I64_SHR_S
0000061: 11                                         ; OPCODE_I64_CONST
0000062: 00                                         ; i64 literal
0000063: 66                                         ; OPCODE_I64_SHR_U
0000064: 11                                         ; OPCODE_I64_CONST
0000065: 00                                         ; i64 literal
0000066: 65                                         ; OPCODE_I64_SHL
0000067: 11                                         ; OPCODE_I64_CONST
0000068: 00                                         ; i64 literal
0000069: 64                                         ; OPCODE_I64_XOR
000006a: 11                                         ; OPCODE_I64_CONST
000006b: 00                                         ; i64 literal
000006c: 63                                         ; OPCODE_I64_OR
000006d: 11                                         ; OPCODE_I64_CONST
000006e: 00                                         ; i64 literal
000006f: 62                                         ; OPCODE_I64_AND
0000070: 11                                         ; OPCODE_I64_CONST
0000071: 00                                         ; i64 literal
0000072: 61                                         ; OPCODE_I64_REM_U
0000073: 11                                         ; OPCODE_I64_CONST
0000074: 00                                         ; i64 literal
0000075: 60                                         ; OPCODE_I64_REM_S
0000076: 11                                         ; OPCODE_I64_CONST
0000077: 00                                         ; i64 literal
0000078: 5f                                         ; OPCODE_I64_DIV_U
0000079: 11                                         ; OPCODE_I64_CONST
000007a: 00                                         ; i64 literal
000007b: 5e                                         ; OPCODE_I64_DIV_S
000007c: 11                                         ; OPCODE_I64_CONST
000007d: 00                                         ; i64 literal
000007e: 5d                                         ; OPCODE_I64_MUL
000007f: 11                                         ; OPCODE_I64_CONST
0000080: 00                                         ; i64 literal
0000081: 5c                                         ; OPCODE_I64_SUB
0000082: 11                                         ; OPCODE_I64_CONST
0000083: 00                                         ; i64 literal
0000084: 5b                                         ; OPCODE_I64_ADD
0000085: 13                                         ; OPCODE_F32_CONST
0000086: 0000 0000                                  ; f32 literal
000008a: 13                                         ; OPCODE_F32_CONST
000008b: 0000 0000                                  ; f32 literal
000008f: 7d                                         ; OPCODE_F32_COPYSIGN
0000090: 13                                         ; OPCODE_F32_CONST
0000091: 0000 0000                                  ; f32 literal
0000095: 7a                                         ; OPCODE_F32_MAX
0000096: 13                                         ; OPCODE_F32_CONST
0000097: 0000 0000                                  ; f32 literal
000009b: 79                                         ; OPCODE_F32_MIN
000009c: 13                                         ; OPCODE_F32_CONST
000009d: 0000 0000                                  ; f32 literal
00000a1: 78                                         ; OPCODE_F32_DIV
00000a2: 13                                         ; OPCODE_F32_CONST
00000a3: 0000 0000                                  ; f32 literal
00000a7: 77                                         ; OPCODE_F32_MUL
00000a8: 13                                         ; OPCODE_F32_CONST
00000a9: 0000 0000                                  ; f32 literal
00000ad: 76                                         ; OPCODE_F32_SUB
00000ae: 13                                         ; OPCODE_F32_CONST
00000af: 0000 0000                                  ; f32 literal
00000b3: 75                                         ; OPCODE_F32_ADD
00000b4: 12                                         ; OPCODE_F64_CONST
00000b5: 0000 0000 0000 0000                        ; f64 literal
00000bd: 12                                         ; OPCODE_F64_CONST
00000be: 0000 0000 0000 0000                        ; f64 literal
00000c6: 91                                         ; OPCODE_F64_COPYSIGN
00000c7: 12                                         ; OPCODE_F64_CONST
00000c8: 0000 0000 0000 0000                        ; f64 literal
00000d0: 8e                                         ; OPCODE_F64_MAX
00000d1: 12                                         ; OPCODE_F64_CONST
00000d2: 0000 0000 0000 0000                        ; f64 literal
00000da: 8d                                         ; OPCODE_F64_MIN
00000db: 12                                         ; OPCODE_F64_CONST
00000dc: 0000 0000 0000 0000                        ; f64 literal
00000e4: 8c                                         ; OPCODE_F64_DIV
00000e5: 12                                         ; OPCODE_F64_CONST
00000e6: 0000 0000 0000 0000                        ; f64 literal
00000ee: 8b                                         ; OPCODE_F64_MUL
00000ef: 12                                         ; OPCODE_F64_CONST
00000f0: 0000 0000 0000 0000                        ; f64 literal
00000f8: 8a                                         ; OPCODE_F64_SUB
00000f9: 12                                         ; OPCODE_F64_CONST
00000fa: 0000 0000 0000 0000                        ; f64 literal
0000102: 89                                         ; OPCODE_F64_ADD
; move data: [26, 103) -> [27, 104)
0000025: dd01                                       ; FIXUP func body size
; move data: [24, 104) -> [25, 105)
0000023: e001                                       ; FIXUP section size
;; dump
0000000: 0061 736d 0b00 0000 0474 7970 6504 0140  
0000010: 0000 0866 756e 6374 696f 6e02 0100 0463  
0000020: 6f64 65e0 0101 dd01 0010 0010 00b6 1000  
0000030: b710 004c 1000 4b10 004a 1000 4910 0048  
0000040: 1000 4710 0046 1000 4510 0044 1000 4310  
0000050: 0042 1000 4110 0040 1100 1100 b811 00b9  
0000060: 1100 6711 0066 1100 6511 0064 1100 6311  
0000070: 0062 1100 6111 0060 1100 5f11 005e 1100  
0000080: 5d11 005c 1100 5b13 0000 0000 1300 0000  
0000090: 007d 1300 0000 007a 1300 0000 0079 1300  
00000a0: 0000 0078 1300 0000 0077 1300 0000 0076  
00000b0: 1300 0000 0075 1200 0000 0000 0000 0012  
00000c0: 0000 0000 0000 0000 9112 0000 0000 0000  
00000d0: 0000 8e12 0000 0000 0000 0000 8d12 0000  
00000e0: 0000 0000 0000 8c12 0000 0000 0000 0000  
00000f0: 8b12 0000 0000 0000 0000 8a12 0000 0000  
0000100: 0000 0000 89                             
;;; STDOUT ;;)
