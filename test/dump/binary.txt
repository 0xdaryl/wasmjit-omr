;;; FLAGS: -dv
(module
  (func
    (i32.add
      (i32.sub
        (i32.mul
          (i32.div_s
            (i32.div_u
              (i32.rem_s
                (i32.rem_u
                  (i32.and
                    (i32.or
                      (i32.xor
                        (i32.shl
                          (i32.shr_u
                            (i32.shr_s
                              (i32.rotl
                                (i32.rotr
                                  (i32.const 0)
                                  (i32.const 0))
                                (i32.const 0))
                              (i32.const 0))
                            (i32.const 0))
                          (i32.const 0))
                        (i32.const 0))
                      (i32.const 0))
                    (i32.const 0))
                  (i32.const 0))
                (i32.const 0))
              (i32.const 0))
            (i32.const 0))
          (i32.const 0))
        (i32.const 0))
      (i32.const 0))

    (i64.add
      (i64.sub
        (i64.mul
          (i64.div_s
            (i64.div_u
              (i64.rem_s
                (i64.rem_u
                  (i64.and
                    (i64.or
                      (i64.xor
                        (i64.shl
                          (i64.shr_u
                            (i64.shr_s
                              (i64.rotl
                                (i64.rotr
                                  (i64.const 0)
                                  (i64.const 0))
                                (i64.const 0))
                              (i64.const 0))
                            (i64.const 0))
                          (i64.const 0))
                        (i64.const 0))
                      (i64.const 0))
                    (i64.const 0))
                  (i64.const 0))
                (i64.const 0))
              (i64.const 0))
            (i64.const 0))
          (i64.const 0))
        (i64.const 0))
      (i64.const 0))

    (f32.add
      (f32.sub
        (f32.mul
          (f32.div
            (f32.min
              (f32.max
                (f32.copysign
                  (f32.const 0)
                  (f32.const 0))
                (f32.const 0))
              (f32.const 0))
            (f32.const 0))
          (f32.const 0))
        (f32.const 0))
      (f32.const 0))

    (f64.add
      (f64.sub
        (f64.mul
          (f64.div
            (f64.min
              (f64.max
                (f64.copysign
                  (f64.const 0)
                  (f64.const 0))
                (f64.const 0))
              (f64.const 0))
            (f64.const 0))
          (f64.const 0))
        (f64.const 0))
      (f64.const 0))

))

(;; STDOUT ;;;
0000000: 0061 736d                                  ; WASM_BINARY_MAGIC
0000004: 0a00 0000                                  ; WASM_BINARY_VERSION
0000008: 01                                         ; WASM_BINARY_SECTION_SIGNATURES
0000009: 01                                         ; num signatures
; signature 0
000000a: 00                                         ; num params
000000b: 00                                         ; result_type
000000c: 02                                         ; WASM_BINARY_SECTION_FUNCTIONS
000000d: 01                                         ; num functions
; function 0
000000e: 00                                         ; func flags
000000f: 0000                                       ; func signature index
0000011: 0000                                       ; func body size
0000013: 40                                         ; OPCODE_I32_ADD
0000014: 41                                         ; OPCODE_I32_SUB
0000015: 42                                         ; OPCODE_I32_MUL
0000016: 43                                         ; OPCODE_I32_DIV_S
0000017: 44                                         ; OPCODE_I32_DIV_U
0000018: 45                                         ; OPCODE_I32_REM_S
0000019: 46                                         ; OPCODE_I32_REM_U
000001a: 47                                         ; OPCODE_I32_AND
000001b: 48                                         ; OPCODE_I32_OR
000001c: 49                                         ; OPCODE_I32_XOR
000001d: 4a                                         ; OPCODE_I32_SHL
000001e: 4b                                         ; OPCODE_I32_SHR_U
000001f: 4c                                         ; OPCODE_I32_SHR_S
0000020: b7                                         ; OPCODE_I32_ROL
0000021: b6                                         ; OPCODE_I32_ROR
0000022: 0a                                         ; OPCODE_I32_CONST
0000023: 00                                         ; i32 literal
0000024: 0a                                         ; OPCODE_I32_CONST
0000025: 00                                         ; i32 literal
0000026: 0a                                         ; OPCODE_I32_CONST
0000027: 00                                         ; i32 literal
0000028: 0a                                         ; OPCODE_I32_CONST
0000029: 00                                         ; i32 literal
000002a: 0a                                         ; OPCODE_I32_CONST
000002b: 00                                         ; i32 literal
000002c: 0a                                         ; OPCODE_I32_CONST
000002d: 00                                         ; i32 literal
000002e: 0a                                         ; OPCODE_I32_CONST
000002f: 00                                         ; i32 literal
0000030: 0a                                         ; OPCODE_I32_CONST
0000031: 00                                         ; i32 literal
0000032: 0a                                         ; OPCODE_I32_CONST
0000033: 00                                         ; i32 literal
0000034: 0a                                         ; OPCODE_I32_CONST
0000035: 00                                         ; i32 literal
0000036: 0a                                         ; OPCODE_I32_CONST
0000037: 00                                         ; i32 literal
0000038: 0a                                         ; OPCODE_I32_CONST
0000039: 00                                         ; i32 literal
000003a: 0a                                         ; OPCODE_I32_CONST
000003b: 00                                         ; i32 literal
000003c: 0a                                         ; OPCODE_I32_CONST
000003d: 00                                         ; i32 literal
000003e: 0a                                         ; OPCODE_I32_CONST
000003f: 00                                         ; i32 literal
0000040: 0a                                         ; OPCODE_I32_CONST
0000041: 00                                         ; i32 literal
0000042: 5b                                         ; OPCODE_I64_ADD
0000043: 5c                                         ; OPCODE_I64_SUB
0000044: 5d                                         ; OPCODE_I64_MUL
0000045: 5e                                         ; OPCODE_I64_DIV_S
0000046: 5f                                         ; OPCODE_I64_DIV_U
0000047: 60                                         ; OPCODE_I64_REM_S
0000048: 61                                         ; OPCODE_I64_REM_U
0000049: 62                                         ; OPCODE_I64_AND
000004a: 63                                         ; OPCODE_I64_OR
000004b: 64                                         ; OPCODE_I64_XOR
000004c: 65                                         ; OPCODE_I64_SHL
000004d: 66                                         ; OPCODE_I64_SHR_U
000004e: 67                                         ; OPCODE_I64_SHR_S
000004f: b9                                         ; OPCODE_I64_ROL
0000050: b8                                         ; OPCODE_I64_ROR
0000051: 0b                                         ; OPCODE_I64_CONST
0000052: 00                                         ; i64 literal
0000053: 0b                                         ; OPCODE_I64_CONST
0000054: 00                                         ; i64 literal
0000055: 0b                                         ; OPCODE_I64_CONST
0000056: 00                                         ; i64 literal
0000057: 0b                                         ; OPCODE_I64_CONST
0000058: 00                                         ; i64 literal
0000059: 0b                                         ; OPCODE_I64_CONST
000005a: 00                                         ; i64 literal
000005b: 0b                                         ; OPCODE_I64_CONST
000005c: 00                                         ; i64 literal
000005d: 0b                                         ; OPCODE_I64_CONST
000005e: 00                                         ; i64 literal
000005f: 0b                                         ; OPCODE_I64_CONST
0000060: 00                                         ; i64 literal
0000061: 0b                                         ; OPCODE_I64_CONST
0000062: 00                                         ; i64 literal
0000063: 0b                                         ; OPCODE_I64_CONST
0000064: 00                                         ; i64 literal
0000065: 0b                                         ; OPCODE_I64_CONST
0000066: 00                                         ; i64 literal
0000067: 0b                                         ; OPCODE_I64_CONST
0000068: 00                                         ; i64 literal
0000069: 0b                                         ; OPCODE_I64_CONST
000006a: 00                                         ; i64 literal
000006b: 0b                                         ; OPCODE_I64_CONST
000006c: 00                                         ; i64 literal
000006d: 0b                                         ; OPCODE_I64_CONST
000006e: 00                                         ; i64 literal
000006f: 0b                                         ; OPCODE_I64_CONST
0000070: 00                                         ; i64 literal
0000071: 75                                         ; OPCODE_F32_ADD
0000072: 76                                         ; OPCODE_F32_SUB
0000073: 77                                         ; OPCODE_F32_MUL
0000074: 78                                         ; OPCODE_F32_DIV
0000075: 79                                         ; OPCODE_F32_MIN
0000076: 7a                                         ; OPCODE_F32_MAX
0000077: 7d                                         ; OPCODE_F32_COPYSIGN
0000078: 0d                                         ; OPCODE_F32_CONST
0000079: 0000 0000                                  ; f32 literal
000007d: 0d                                         ; OPCODE_F32_CONST
000007e: 0000 0000                                  ; f32 literal
0000082: 0d                                         ; OPCODE_F32_CONST
0000083: 0000 0000                                  ; f32 literal
0000087: 0d                                         ; OPCODE_F32_CONST
0000088: 0000 0000                                  ; f32 literal
000008c: 0d                                         ; OPCODE_F32_CONST
000008d: 0000 0000                                  ; f32 literal
0000091: 0d                                         ; OPCODE_F32_CONST
0000092: 0000 0000                                  ; f32 literal
0000096: 0d                                         ; OPCODE_F32_CONST
0000097: 0000 0000                                  ; f32 literal
000009b: 0d                                         ; OPCODE_F32_CONST
000009c: 0000 0000                                  ; f32 literal
00000a0: 89                                         ; OPCODE_F64_ADD
00000a1: 8a                                         ; OPCODE_F64_SUB
00000a2: 8b                                         ; OPCODE_F64_MUL
00000a3: 8c                                         ; OPCODE_F64_DIV
00000a4: 8d                                         ; OPCODE_F64_MIN
00000a5: 8e                                         ; OPCODE_F64_MAX
00000a6: 91                                         ; OPCODE_F64_COPYSIGN
00000a7: 0c                                         ; OPCODE_F64_CONST
00000a8: 0000 0000 0000 0000                        ; f64 literal
00000b0: 0c                                         ; OPCODE_F64_CONST
00000b1: 0000 0000 0000 0000                        ; f64 literal
00000b9: 0c                                         ; OPCODE_F64_CONST
00000ba: 0000 0000 0000 0000                        ; f64 literal
00000c2: 0c                                         ; OPCODE_F64_CONST
00000c3: 0000 0000 0000 0000                        ; f64 literal
00000cb: 0c                                         ; OPCODE_F64_CONST
00000cc: 0000 0000 0000 0000                        ; f64 literal
00000d4: 0c                                         ; OPCODE_F64_CONST
00000d5: 0000 0000 0000 0000                        ; f64 literal
00000dd: 0c                                         ; OPCODE_F64_CONST
00000de: 0000 0000 0000 0000                        ; f64 literal
00000e6: 0c                                         ; OPCODE_F64_CONST
00000e7: 0000 0000 0000 0000                        ; f64 literal
0000011: dc00                                       ; FIXUP func body size
00000ef: 06                                         ; WASM_BINARY_SECTION_END
;; dump
0000000: 0061 736d 0a00 0000 0101 0000 0201 0000  
0000010: 00dc 0040 4142 4344 4546 4748 494a 4b4c  
0000020: b7b6 0a00 0a00 0a00 0a00 0a00 0a00 0a00  
0000030: 0a00 0a00 0a00 0a00 0a00 0a00 0a00 0a00  
0000040: 0a00 5b5c 5d5e 5f60 6162 6364 6566 67b9  
0000050: b80b 000b 000b 000b 000b 000b 000b 000b  
0000060: 000b 000b 000b 000b 000b 000b 000b 000b  
0000070: 0075 7677 7879 7a7d 0d00 0000 000d 0000  
0000080: 0000 0d00 0000 000d 0000 0000 0d00 0000  
0000090: 000d 0000 0000 0d00 0000 000d 0000 0000  
00000a0: 898a 8b8c 8d8e 910c 0000 0000 0000 0000  
00000b0: 0c00 0000 0000 0000 000c 0000 0000 0000  
00000c0: 0000 0c00 0000 0000 0000 000c 0000 0000  
00000d0: 0000 0000 0c00 0000 0000 0000 000c 0000  
00000e0: 0000 0000 0000 0c00 0000 0000 0000 0006  
;;; STDOUT ;;)
