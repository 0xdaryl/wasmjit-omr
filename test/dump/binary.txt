;;; FLAGS: -dv
(module
  (func
    (i32.add
      (i32.sub
        (i32.mul
          (i32.div_s
            (i32.div_u
              (i32.rem_s
                (i32.rem_u
                  (i32.and
                    (i32.or
                      (i32.xor
                        (i32.shl
                          (i32.shr_u
                            (i32.shr_s
                              (i32.rotl
                                (i32.rotr
                                  (i32.const 0)
                                  (i32.const 0))
                                (i32.const 0))
                              (i32.const 0))
                            (i32.const 0))
                          (i32.const 0))
                        (i32.const 0))
                      (i32.const 0))
                    (i32.const 0))
                  (i32.const 0))
                (i32.const 0))
              (i32.const 0))
            (i32.const 0))
          (i32.const 0))
        (i32.const 0))
      (i32.const 0))

    (i64.add
      (i64.sub
        (i64.mul
          (i64.div_s
            (i64.div_u
              (i64.rem_s
                (i64.rem_u
                  (i64.and
                    (i64.or
                      (i64.xor
                        (i64.shl
                          (i64.shr_u
                            (i64.shr_s
                              (i64.rotl
                                (i64.rotr
                                  (i64.const 0)
                                  (i64.const 0))
                                (i64.const 0))
                              (i64.const 0))
                            (i64.const 0))
                          (i64.const 0))
                        (i64.const 0))
                      (i64.const 0))
                    (i64.const 0))
                  (i64.const 0))
                (i64.const 0))
              (i64.const 0))
            (i64.const 0))
          (i64.const 0))
        (i64.const 0))
      (i64.const 0))

    (f32.add
      (f32.sub
        (f32.mul
          (f32.div
            (f32.min
              (f32.max
                (f32.copysign
                  (f32.const 0)
                  (f32.const 0))
                (f32.const 0))
              (f32.const 0))
            (f32.const 0))
          (f32.const 0))
        (f32.const 0))
      (f32.const 0))

    (f64.add
      (f64.sub
        (f64.mul
          (f64.div
            (f64.min
              (f64.max
                (f64.copysign
                  (f64.const 0)
                  (f64.const 0))
                (f64.const 0))
              (f64.const 0))
            (f64.const 0))
          (f64.const 0))
        (f64.const 0))
      (f64.const 0))

))

(;; STDOUT ;;;
0000000: 0061 736d                                  ; WASM_BINARY_MAGIC
0000004: 0a00 0000                                  ; WASM_BINARY_VERSION
; section "signatures"
0000008: 00                                         ; section size (guess)
0000009: 0a                                         ; string length
000000a: 7369 676e 6174 7572 6573                   ; section id: "signatures"
0000014: 01                                         ; num signatures
; signature 0
0000015: 00                                         ; num params
0000016: 00                                         ; result_type
0000008: 0e                                         ; FIXUP section size
; section "function_signatures"
0000017: 00                                         ; section size (guess)
0000018: 13                                         ; string length
0000019: 6675 6e63 7469 6f6e 5f73 6967 6e61 7475  
0000029: 7265 73                                    ; section id: "function_signatures"
000002c: 01                                         ; num functions
000002d: 00                                         ; function 0 signature index
0000017: 16                                         ; FIXUP section size
; section "function_bodies"
000002e: 00                                         ; section size (guess)
000002f: 0f                                         ; string length
0000030: 6675 6e63 7469 6f6e 5f62 6f64 6965 73      ; section id: "function_bodies"
000003f: 01                                         ; num functions
; function body 0
0000040: 00                                         ; func body size (guess)
0000041: 00                                         ; local decl count
0000042: 40                                         ; OPCODE_I32_ADD
0000043: 41                                         ; OPCODE_I32_SUB
0000044: 42                                         ; OPCODE_I32_MUL
0000045: 43                                         ; OPCODE_I32_DIV_S
0000046: 44                                         ; OPCODE_I32_DIV_U
0000047: 45                                         ; OPCODE_I32_REM_S
0000048: 46                                         ; OPCODE_I32_REM_U
0000049: 47                                         ; OPCODE_I32_AND
000004a: 48                                         ; OPCODE_I32_OR
000004b: 49                                         ; OPCODE_I32_XOR
000004c: 4a                                         ; OPCODE_I32_SHL
000004d: 4b                                         ; OPCODE_I32_SHR_U
000004e: 4c                                         ; OPCODE_I32_SHR_S
000004f: b7                                         ; OPCODE_I32_ROTL
0000050: b6                                         ; OPCODE_I32_ROTR
0000051: 0a                                         ; OPCODE_I32_CONST
0000052: 00                                         ; i32 literal
0000053: 0a                                         ; OPCODE_I32_CONST
0000054: 00                                         ; i32 literal
0000055: 0a                                         ; OPCODE_I32_CONST
0000056: 00                                         ; i32 literal
0000057: 0a                                         ; OPCODE_I32_CONST
0000058: 00                                         ; i32 literal
0000059: 0a                                         ; OPCODE_I32_CONST
000005a: 00                                         ; i32 literal
000005b: 0a                                         ; OPCODE_I32_CONST
000005c: 00                                         ; i32 literal
000005d: 0a                                         ; OPCODE_I32_CONST
000005e: 00                                         ; i32 literal
000005f: 0a                                         ; OPCODE_I32_CONST
0000060: 00                                         ; i32 literal
0000061: 0a                                         ; OPCODE_I32_CONST
0000062: 00                                         ; i32 literal
0000063: 0a                                         ; OPCODE_I32_CONST
0000064: 00                                         ; i32 literal
0000065: 0a                                         ; OPCODE_I32_CONST
0000066: 00                                         ; i32 literal
0000067: 0a                                         ; OPCODE_I32_CONST
0000068: 00                                         ; i32 literal
0000069: 0a                                         ; OPCODE_I32_CONST
000006a: 00                                         ; i32 literal
000006b: 0a                                         ; OPCODE_I32_CONST
000006c: 00                                         ; i32 literal
000006d: 0a                                         ; OPCODE_I32_CONST
000006e: 00                                         ; i32 literal
000006f: 0a                                         ; OPCODE_I32_CONST
0000070: 00                                         ; i32 literal
0000071: 5b                                         ; OPCODE_I64_ADD
0000072: 5c                                         ; OPCODE_I64_SUB
0000073: 5d                                         ; OPCODE_I64_MUL
0000074: 5e                                         ; OPCODE_I64_DIV_S
0000075: 5f                                         ; OPCODE_I64_DIV_U
0000076: 60                                         ; OPCODE_I64_REM_S
0000077: 61                                         ; OPCODE_I64_REM_U
0000078: 62                                         ; OPCODE_I64_AND
0000079: 63                                         ; OPCODE_I64_OR
000007a: 64                                         ; OPCODE_I64_XOR
000007b: 65                                         ; OPCODE_I64_SHL
000007c: 66                                         ; OPCODE_I64_SHR_U
000007d: 67                                         ; OPCODE_I64_SHR_S
000007e: b9                                         ; OPCODE_I64_ROTL
000007f: b8                                         ; OPCODE_I64_ROTR
0000080: 0b                                         ; OPCODE_I64_CONST
0000081: 00                                         ; i64 literal
0000082: 0b                                         ; OPCODE_I64_CONST
0000083: 00                                         ; i64 literal
0000084: 0b                                         ; OPCODE_I64_CONST
0000085: 00                                         ; i64 literal
0000086: 0b                                         ; OPCODE_I64_CONST
0000087: 00                                         ; i64 literal
0000088: 0b                                         ; OPCODE_I64_CONST
0000089: 00                                         ; i64 literal
000008a: 0b                                         ; OPCODE_I64_CONST
000008b: 00                                         ; i64 literal
000008c: 0b                                         ; OPCODE_I64_CONST
000008d: 00                                         ; i64 literal
000008e: 0b                                         ; OPCODE_I64_CONST
000008f: 00                                         ; i64 literal
0000090: 0b                                         ; OPCODE_I64_CONST
0000091: 00                                         ; i64 literal
0000092: 0b                                         ; OPCODE_I64_CONST
0000093: 00                                         ; i64 literal
0000094: 0b                                         ; OPCODE_I64_CONST
0000095: 00                                         ; i64 literal
0000096: 0b                                         ; OPCODE_I64_CONST
0000097: 00                                         ; i64 literal
0000098: 0b                                         ; OPCODE_I64_CONST
0000099: 00                                         ; i64 literal
000009a: 0b                                         ; OPCODE_I64_CONST
000009b: 00                                         ; i64 literal
000009c: 0b                                         ; OPCODE_I64_CONST
000009d: 00                                         ; i64 literal
000009e: 0b                                         ; OPCODE_I64_CONST
000009f: 00                                         ; i64 literal
00000a0: 75                                         ; OPCODE_F32_ADD
00000a1: 76                                         ; OPCODE_F32_SUB
00000a2: 77                                         ; OPCODE_F32_MUL
00000a3: 78                                         ; OPCODE_F32_DIV
00000a4: 79                                         ; OPCODE_F32_MIN
00000a5: 7a                                         ; OPCODE_F32_MAX
00000a6: 7d                                         ; OPCODE_F32_COPYSIGN
00000a7: 0d                                         ; OPCODE_F32_CONST
00000a8: 0000 0000                                  ; f32 literal
00000ac: 0d                                         ; OPCODE_F32_CONST
00000ad: 0000 0000                                  ; f32 literal
00000b1: 0d                                         ; OPCODE_F32_CONST
00000b2: 0000 0000                                  ; f32 literal
00000b6: 0d                                         ; OPCODE_F32_CONST
00000b7: 0000 0000                                  ; f32 literal
00000bb: 0d                                         ; OPCODE_F32_CONST
00000bc: 0000 0000                                  ; f32 literal
00000c0: 0d                                         ; OPCODE_F32_CONST
00000c1: 0000 0000                                  ; f32 literal
00000c5: 0d                                         ; OPCODE_F32_CONST
00000c6: 0000 0000                                  ; f32 literal
00000ca: 0d                                         ; OPCODE_F32_CONST
00000cb: 0000 0000                                  ; f32 literal
00000cf: 89                                         ; OPCODE_F64_ADD
00000d0: 8a                                         ; OPCODE_F64_SUB
00000d1: 8b                                         ; OPCODE_F64_MUL
00000d2: 8c                                         ; OPCODE_F64_DIV
00000d3: 8d                                         ; OPCODE_F64_MIN
00000d4: 8e                                         ; OPCODE_F64_MAX
00000d5: 91                                         ; OPCODE_F64_COPYSIGN
00000d6: 0c                                         ; OPCODE_F64_CONST
00000d7: 0000 0000 0000 0000                        ; f64 literal
00000df: 0c                                         ; OPCODE_F64_CONST
00000e0: 0000 0000 0000 0000                        ; f64 literal
00000e8: 0c                                         ; OPCODE_F64_CONST
00000e9: 0000 0000 0000 0000                        ; f64 literal
00000f1: 0c                                         ; OPCODE_F64_CONST
00000f2: 0000 0000 0000 0000                        ; f64 literal
00000fa: 0c                                         ; OPCODE_F64_CONST
00000fb: 0000 0000 0000 0000                        ; f64 literal
0000103: 0c                                         ; OPCODE_F64_CONST
0000104: 0000 0000 0000 0000                        ; f64 literal
000010c: 0c                                         ; OPCODE_F64_CONST
000010d: 0000 0000 0000 0000                        ; f64 literal
0000115: 0c                                         ; OPCODE_F64_CONST
0000116: 0000 0000 0000 0000                        ; f64 literal
; move data: [41, 11e) -> [42, 11f)
0000040: dd01                                       ; FIXUP func body size
; move data: [2f, 11f) -> [30, 120)
000002e: f001                                       ; FIXUP section size
;; dump
0000000: 0061 736d 0a00 0000 0e0a 7369 676e 6174  
0000010: 7572 6573 0100 0016 1366 756e 6374 696f  
0000020: 6e5f 7369 676e 6174 7572 6573 0100 f001  
0000030: 0f66 756e 6374 696f 6e5f 626f 6469 6573  
0000040: 01dd 0100 4041 4243 4445 4647 4849 4a4b  
0000050: 4cb7 b60a 000a 000a 000a 000a 000a 000a  
0000060: 000a 000a 000a 000a 000a 000a 000a 000a  
0000070: 000a 005b 5c5d 5e5f 6061 6263 6465 6667  
0000080: b9b8 0b00 0b00 0b00 0b00 0b00 0b00 0b00  
0000090: 0b00 0b00 0b00 0b00 0b00 0b00 0b00 0b00  
00000a0: 0b00 7576 7778 797a 7d0d 0000 0000 0d00  
00000b0: 0000 000d 0000 0000 0d00 0000 000d 0000  
00000c0: 0000 0d00 0000 000d 0000 0000 0d00 0000  
00000d0: 0089 8a8b 8c8d 8e91 0c00 0000 0000 0000  
00000e0: 000c 0000 0000 0000 0000 0c00 0000 0000  
00000f0: 0000 000c 0000 0000 0000 0000 0c00 0000  
0000100: 0000 0000 000c 0000 0000 0000 0000 0c00  
0000110: 0000 0000 0000 000c 0000 0000 0000 0000  
;;; STDOUT ;;)
