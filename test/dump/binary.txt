# FLAGS: -dv
(module
  (func
    (i32.add
      (i32.sub
        (i32.mul
          (i32.div_s
            (i32.div_u
              (i32.rem_s
                (i32.rem_u
                  (i32.and
                    (i32.or
                      (i32.xor
                        (i32.shl
                          (i32.shr_u
                            (i32.shr_s
                              (i32.const 0)
                              (i32.const 0))
                            (i32.const 0))
                          (i32.const 0))
                        (i32.const 0))
                      (i32.const 0))
                    (i32.const 0))
                  (i32.const 0))
                (i32.const 0))
              (i32.const 0))
            (i32.const 0))
          (i32.const 0))
        (i32.const 0))
      (i32.const 0))

    (i64.add
      (i64.sub
        (i64.mul
          (i64.div_s
            (i64.div_u
              (i64.rem_s
                (i64.rem_u
                  (i64.and
                    (i64.or
                      (i64.xor
                        (i64.shl
                          (i64.shr_u
                            (i64.shr_s
                              (i64.const 0)
                              (i64.const 0))
                            (i64.const 0))
                          (i64.const 0))
                        (i64.const 0))
                      (i64.const 0))
                    (i64.const 0))
                  (i64.const 0))
                (i64.const 0))
              (i64.const 0))
            (i64.const 0))
          (i64.const 0))
        (i64.const 0))
      (i64.const 0))

    (f32.add
      (f32.sub
        (f32.mul
          (f32.div
            (f32.min
              (f32.max
                (f32.copysign
                  (f32.const 0)
                  (f32.const 0))
                (f32.const 0))
              (f32.const 0))
            (f32.const 0))
          (f32.const 0))
        (f32.const 0))
      (f32.const 0))

    (f64.add
      (f64.sub
        (f64.mul
          (f64.div
            (f64.min
              (f64.max
                (f64.copysign
                  (f64.const 0)
                  (f64.const 0))
                (f64.const 0))
              (f64.const 0))
            (f64.const 0))
          (f64.const 0))
        (f64.const 0))
      (f64.const 0))

))

# STDOUT:
0000000: 00                                         ; mem size log 2
0000001: 01                                         ; export mem
0000002: 0000                                       ; num globals
0000004: 0100                                       ; num funcs
0000006: 0000                                       ; num data segments
; function header 0
0000008: 00                                         ; func num args
0000009: 00                                         ; func result type
000000a: 0000 0000                                  ; func name offset
000000e: 0000 0000                                  ; func code start offset
0000012: 0000 0000                                  ; func code end offset
0000016: 0000                                       ; num local i32
0000018: 0000                                       ; num local i64
000001a: 0000                                       ; num local f32
000001c: 0000                                       ; num local f64
000001e: 00                                         ; export func
000001f: 00                                         ; func external
; function data 0
000000e: 2000 0000                                  ; FIXUP func code start offset
0000020: 03                                         ; OPCODE_BLOCK
0000021: 00                                         ; toplevel block num expressions
0000022: 40                                         ; OPCODE_I32_ADD
0000023: 41                                         ; OPCODE_I32_SUB
0000024: 42                                         ; OPCODE_I32_MUL
0000025: 43                                         ; OPCODE_I32_SDIV
0000026: 44                                         ; OPCODE_I32_UDIV
0000027: 45                                         ; OPCODE_I32_SREM
0000028: 46                                         ; OPCODE_I32_UREM
0000029: 47                                         ; OPCODE_I32_AND
000002a: 48                                         ; OPCODE_I32_OR
000002b: 49                                         ; OPCODE_I32_XOR
000002c: 4a                                         ; OPCODE_I32_SHL
000002d: 4b                                         ; OPCODE_I32_SHR
000002e: 4c                                         ; OPCODE_I32_SAR
000002f: 10                                         ; OPCODE_I8_CONST
0000030: 00                                         ; u8 literal
0000031: 10                                         ; OPCODE_I8_CONST
0000032: 00                                         ; u8 literal
0000033: 10                                         ; OPCODE_I8_CONST
0000034: 00                                         ; u8 literal
0000035: 10                                         ; OPCODE_I8_CONST
0000036: 00                                         ; u8 literal
0000037: 10                                         ; OPCODE_I8_CONST
0000038: 00                                         ; u8 literal
0000039: 10                                         ; OPCODE_I8_CONST
000003a: 00                                         ; u8 literal
000003b: 10                                         ; OPCODE_I8_CONST
000003c: 00                                         ; u8 literal
000003d: 10                                         ; OPCODE_I8_CONST
000003e: 00                                         ; u8 literal
000003f: 10                                         ; OPCODE_I8_CONST
0000040: 00                                         ; u8 literal
0000041: 10                                         ; OPCODE_I8_CONST
0000042: 00                                         ; u8 literal
0000043: 10                                         ; OPCODE_I8_CONST
0000044: 00                                         ; u8 literal
0000045: 10                                         ; OPCODE_I8_CONST
0000046: 00                                         ; u8 literal
0000047: 10                                         ; OPCODE_I8_CONST
0000048: 00                                         ; u8 literal
0000049: 10                                         ; OPCODE_I8_CONST
000004a: 00                                         ; u8 literal
000004b: 5b                                         ; OPCODE_I64_ADD
000004c: 5c                                         ; OPCODE_I64_SUB
000004d: 5d                                         ; OPCODE_I64_MUL
000004e: 5e                                         ; OPCODE_I64_SDIV
000004f: 5f                                         ; OPCODE_I64_UDIV
0000050: 60                                         ; OPCODE_I64_SREM
0000051: 61                                         ; OPCODE_I64_UREM
0000052: 62                                         ; OPCODE_I64_AND
0000053: 63                                         ; OPCODE_I64_OR
0000054: 64                                         ; OPCODE_I64_XOR
0000055: 65                                         ; OPCODE_I64_SHL
0000056: 66                                         ; OPCODE_I64_SHR
0000057: 67                                         ; OPCODE_I64_SAR
0000058: 12                                         ; OPCODE_I64_CONST
0000059: 0000 0000 0000 0000                        ; u64 literal
0000061: 12                                         ; OPCODE_I64_CONST
0000062: 0000 0000 0000 0000                        ; u64 literal
000006a: 12                                         ; OPCODE_I64_CONST
000006b: 0000 0000 0000 0000                        ; u64 literal
0000073: 12                                         ; OPCODE_I64_CONST
0000074: 0000 0000 0000 0000                        ; u64 literal
000007c: 12                                         ; OPCODE_I64_CONST
000007d: 0000 0000 0000 0000                        ; u64 literal
0000085: 12                                         ; OPCODE_I64_CONST
0000086: 0000 0000 0000 0000                        ; u64 literal
000008e: 12                                         ; OPCODE_I64_CONST
000008f: 0000 0000 0000 0000                        ; u64 literal
0000097: 12                                         ; OPCODE_I64_CONST
0000098: 0000 0000 0000 0000                        ; u64 literal
00000a0: 12                                         ; OPCODE_I64_CONST
00000a1: 0000 0000 0000 0000                        ; u64 literal
00000a9: 12                                         ; OPCODE_I64_CONST
00000aa: 0000 0000 0000 0000                        ; u64 literal
00000b2: 12                                         ; OPCODE_I64_CONST
00000b3: 0000 0000 0000 0000                        ; u64 literal
00000bb: 12                                         ; OPCODE_I64_CONST
00000bc: 0000 0000 0000 0000                        ; u64 literal
00000c4: 12                                         ; OPCODE_I64_CONST
00000c5: 0000 0000 0000 0000                        ; u64 literal
00000cd: 12                                         ; OPCODE_I64_CONST
00000ce: 0000 0000 0000 0000                        ; u64 literal
00000d6: 75                                         ; OPCODE_F32_ADD
00000d7: 76                                         ; OPCODE_F32_SUB
00000d8: 77                                         ; OPCODE_F32_MUL
00000d9: 78                                         ; OPCODE_F32_DIV
00000da: 79                                         ; OPCODE_F32_MIN
00000db: 7a                                         ; OPCODE_F32_MAX
00000dc: 7d                                         ; OPCODE_F32_COPYSIGN
00000dd: 14                                         ; OPCODE_F32_CONST
00000de: 0000 0000                                  ; f32 literal
00000e2: 14                                         ; OPCODE_F32_CONST
00000e3: 0000 0000                                  ; f32 literal
00000e7: 14                                         ; OPCODE_F32_CONST
00000e8: 0000 0000                                  ; f32 literal
00000ec: 14                                         ; OPCODE_F32_CONST
00000ed: 0000 0000                                  ; f32 literal
00000f1: 14                                         ; OPCODE_F32_CONST
00000f2: 0000 0000                                  ; f32 literal
00000f6: 14                                         ; OPCODE_F32_CONST
00000f7: 0000 0000                                  ; f32 literal
00000fb: 14                                         ; OPCODE_F32_CONST
00000fc: 0000 0000                                  ; f32 literal
0000100: 14                                         ; OPCODE_F32_CONST
0000101: 0000 0000                                  ; f32 literal
0000105: 89                                         ; OPCODE_F64_ADD
0000106: 8a                                         ; OPCODE_F64_SUB
0000107: 8b                                         ; OPCODE_F64_MUL
0000108: 8c                                         ; OPCODE_F64_DIV
0000109: 8d                                         ; OPCODE_F64_MIN
000010a: 8e                                         ; OPCODE_F64_MAX
000010b: 91                                         ; OPCODE_F64_COPYSIGN
000010c: 13                                         ; OPCODE_F64_CONST
000010d: 0000 0000 0000 0000                        ; f64 literal
0000115: 13                                         ; OPCODE_F64_CONST
0000116: 0000 0000 0000 0000                        ; f64 literal
000011e: 13                                         ; OPCODE_F64_CONST
000011f: 0000 0000 0000 0000                        ; f64 literal
0000127: 13                                         ; OPCODE_F64_CONST
0000128: 0000 0000 0000 0000                        ; f64 literal
0000130: 13                                         ; OPCODE_F64_CONST
0000131: 0000 0000 0000 0000                        ; f64 literal
0000139: 13                                         ; OPCODE_F64_CONST
000013a: 0000 0000 0000 0000                        ; f64 literal
0000142: 13                                         ; OPCODE_F64_CONST
0000143: 0000 0000 0000 0000                        ; f64 literal
000014b: 13                                         ; OPCODE_F64_CONST
000014c: 0000 0000 0000 0000                        ; f64 literal
0000021: 04                                         ; FIXUP toplevel block num expressions
0000012: 5401 0000                                  ; FIXUP func code end offset
; names
0000000: 0001 0000 0100 0000 0000 0000 0000 2000  .............. .
0000010: 0000 5401 0000 0000 0000 0000 0000 0000  ..T.............
0000020: 0304 4041 4243 4445 4647 4849 4a4b 4c10  ..@ABCDEFGHIJKL.
0000030: 0010 0010 0010 0010 0010 0010 0010 0010  ................
0000040: 0010 0010 0010 0010 0010 005b 5c5d 5e5f  ...........[\]^_
0000050: 6061 6263 6465 6667 1200 0000 0000 0000  `abcdefg........
0000060: 0012 0000 0000 0000 0000 1200 0000 0000  ................
0000070: 0000 0012 0000 0000 0000 0000 1200 0000  ................
0000080: 0000 0000 0012 0000 0000 0000 0000 1200  ................
0000090: 0000 0000 0000 0012 0000 0000 0000 0000  ................
00000a0: 1200 0000 0000 0000 0012 0000 0000 0000  ................
00000b0: 0000 1200 0000 0000 0000 0012 0000 0000  ................
00000c0: 0000 0000 1200 0000 0000 0000 0012 0000  ................
00000d0: 0000 0000 0000 7576 7778 797a 7d14 0000  ......uvwxyz}...
00000e0: 0000 1400 0000 0014 0000 0000 1400 0000  ................
00000f0: 0014 0000 0000 1400 0000 0014 0000 0000  ................
0000100: 1400 0000 0089 8a8b 8c8d 8e91 1300 0000  ................
0000110: 0000 0000 0013 0000 0000 0000 0000 1300  ................
0000120: 0000 0000 0000 0013 0000 0000 0000 0000  ................
0000130: 1300 0000 0000 0000 0013 0000 0000 0000  ................
0000140: 0000 1300 0000 0000 0000 0013 0000 0000  ................
0000150: 0000 0000                                ....
