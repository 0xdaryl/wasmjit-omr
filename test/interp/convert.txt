;;; TOOL: run-interp
(module
  ;; i32
  (export "i32_wrap_i64" $i32_wrap_i64)
  (func $i32_wrap_i64 (result i32) (i32.wrap/i64 (i64.const -1)))
  ;; TODO(binji): how best to distinguish _s from _u?
  (export "i32_trunc_s_f32" $i32_trunc_s_f32)
  (func $i32_trunc_s_f32 (result i32) (i32.trunc_s/f32 (f32.const -100.12345)))
  (export "i32_trunc_u_f32" $i32_trunc_u_f32)
  (func $i32_trunc_u_f32 (result i32) (i32.trunc_u/f32 (f32.const 3e9)))
  (export "i32_trunc_s_f64" $i32_trunc_s_f64)
  (func $i32_trunc_s_f64 (result i32) (i32.trunc_s/f64 (f64.const -100.12345)))
  (export "i32_trunc_u_f64" $i32_trunc_u_f64)
  (func $i32_trunc_u_f64 (result i32) (i32.trunc_u/f64 (f64.const 3e9)))

  ;; i64
  ;; The JavaScript host truncates if you try to return an i64, so we'll do
  ;; a comparison against the expected value instead.
  (export "i64_extend_u_i32" $i64_extend_u_i32)
  (func $i64_extend_u_i32 (result i32)
      (i64.eq (i64.extend_u/i32 (i32.const -1)) (i64.const 4294967295)))
  (export "i64_extend_s_i32" $i64_extend_s_i32)
  (func $i64_extend_s_i32 (result i32)
      (i64.eq (i64.extend_s/i32 (i32.const -1))
              (i64.const 18446744073709551615)))

  (export "i64_trunc_s_f32" $i64_trunc_s_f32)
  (func $i64_trunc_s_f32 (result i32)
      (i64.eq (i64.trunc_s/f32 (f32.const -100.12345)) (i64.const -100)))
  (export "i64_trunc_u_f32" $i64_trunc_u_f32)
  (func $i64_trunc_u_f32 (result i32)
      (i64.eq (i64.trunc_u/f32 (f32.const 3e9)) (i64.const 3000000000)))
  (export "i64_trunc_s_f64" $i64_trunc_s_f64)
  (func $i64_trunc_s_f64 (result i32)
      (i64.eq (i64.trunc_s/f64 (f64.const -100.12345)) (i64.const -100)))
  (export "i64_trunc_u_f64" $i64_trunc_u_f64)
  (func $i64_trunc_u_f64 (result i32)
      (i64.eq (i64.trunc_u/f64 (f64.const 3e9)) (i64.const 3000000000)))

  ;; f32
  (export "f32_convert_s_i32" $f32_convert_s_i32)
  (func $f32_convert_s_i32 (result f32) (f32.convert_s/i32 (i32.const -1)))
  (export "f32_convert_u_i32" $f32_convert_u_i32)
  (func $f32_convert_u_i32 (result f32) (f32.convert_u/i32 (i32.const -1)))
  (export "f32_demote_f64" $f32_demote_f64)
  (func $f32_demote_f64 (result f32) (f32.demote/f64 (f64.const 12345678.9)))
  (export "f32_convert_s_i64" $f32_convert_s_i64)
  (func $f32_convert_s_i64 (result f32) (f32.convert_s/i64 (i64.const 0)))
  (export "f32_convert_u_i64" $f32_convert_u_i64)
  (func $f32_convert_u_i64 (result f32) (f32.convert_u/i64 (i64.const 0)))

  ;; f64
  (export "f64_convert_s_i32" $f64_convert_s_i32)
  (func $f64_convert_s_i32 (result f64) (f64.convert_s/i32 (i32.const -1)))
  (export "f64_convert_u_i32" $f64_convert_u_i32)
  (func $f64_convert_u_i32 (result f64) (f64.convert_u/i32 (i32.const -1)))
  (export "f64_demote_f32" $f64_demote_f32)
  (func $f64_demote_f32 (result f64) (f64.promote/f32 (f32.const 12345678.9)))
  (export "f64_convert_s_i64" $f64_convert_s_i64)
  (func $f64_convert_s_i64 (result f64) (f64.convert_s/i64 (i64.const 0)))
  (export "f64_convert_u_i64" $f64_convert_u_i64)
  (func $f64_convert_u_i64 (result f64) (f64.convert_u/i64 (i64.const 0)))
)
(;; STDOUT ;;;
i32_wrap_i64() => i32:4294967295
i32_trunc_s_f32() => i32:4294967196
i32_trunc_u_f32() => i32:3000000000
i32_trunc_s_f64() => i32:4294967196
i32_trunc_u_f64() => i32:3000000000
i64_extend_u_i32() => i32:1
i64_extend_s_i32() => i32:1
i64_trunc_s_f32() => i32:1
i64_trunc_u_f32() => i32:1
i64_trunc_s_f64() => i32:1
i64_trunc_u_f64() => i32:1
f32_convert_s_i32() => f32:-1
f32_convert_u_i32() => f32:4.29497e+09
f32_demote_f64() => f32:1.23457e+07
f32_convert_s_i64() => f32:0
f32_convert_u_i64() => f32:0
f64_convert_s_i32() => f64:-1
f64_convert_u_i32() => f64:4.29497e+09
f64_demote_f32() => f64:1.23457e+07
f64_convert_s_i64() => f64:0
f64_convert_u_i64() => f64:0
;;; STDOUT ;;)
