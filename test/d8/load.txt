# EXE: test/run-d8.py
(module
  (memory 128
      (segment 0 "\ff\ff\ff\ff")
      (segment 4 "\00\00\ce\41")
      (segment 8 "\00\00\00\00\00\ff\8f\40")
      (segment 16 "\ff\ff\ff\ff\ff\ff\ff\ff"))

  (export "i32_load_s_i8" $i32_load_s_i8)
  (func $i32_load_s_i8 (result i32) (i32.load_s/i8 (i32.const 0)))
  (export "i32_load_s_i16" $i32_load_s_i16)
  (func $i32_load_s_i16 (result i32) (i32.load_s/i16 (i32.const 0)))
  (export "i32_load_s_i32" $i32_load_s_i32)
  (func $i32_load_s_i32 (result i32) (i32.load_s/i32 (i32.const 0)))

  (export "i32_load_u_i8" $i32_load_u_i8)
  (func $i32_load_u_i8 (result i32) (i32.load_u/i8 (i32.const 0)))
  (export "i32_load_u_i16" $i32_load_u_i16)
  (func $i32_load_u_i16 (result i32) (i32.load_u/i16 (i32.const 0)))
  (export "i32_load_u_i32" $i32_load_u_i32)
  (func $i32_load_u_i32 (result i32) (i32.load_u/i32 (i32.const 0)))

  ;; v8-native-prototype currently crashes if you try to return an i64, so
  ;; we'll do a comparison against the expected value instead.

  ;; currently broken? Should be returning -1
  (export "i64_load_s_i8" $i64_load_s_i8)
  (func $i64_load_s_i8 (result i32) (i64.eq (i64.load_s/i8 (i32.const 0))
                                            (i64.const -1)))
  (export "i64_load_s_i16" $i64_load_s_i16)
  (func $i64_load_s_i16 (result i32) (i64.eq (i64.load_s/i16 (i32.const 0))
                                             (i64.const -1)))
  (export "i64_load_s_i32" $i64_load_s_i32)
  (func $i64_load_s_i32 (result i32) (i64.eq (i64.load_s/i32 (i32.const 0))
                                             (i64.const -1)))
  (export "i64_load_s_i64" $i64_load_s_i64)
  (func $i64_load_s_i64 (result i32) (i64.eq (i64.load_s/i64 (i32.const 16))
                                             (i64.const -1)))

  (export "i64_load_u_i8" $i64_load_u_i8)
  (func $i64_load_u_i8 (result i32) (i64.eq (i64.load_u/i8 (i32.const 0))
                                            (i64.const 255)))
  (export "i64_load_u_i16" $i64_load_u_i16)
  (func $i64_load_u_i16 (result i32) (i64.eq (i64.load_u/i16 (i32.const 0))
                                             (i64.const 65535)))
  (export "i64_load_u_i32" $i64_load_u_i32)
  (func $i64_load_u_i32 (result i32) (i64.eq (i64.load_u/i32 (i32.const 0))
                                             (i64.const 4294967295)))
  (export "i64_load_u_i64" $i64_load_u_i64)
  (func $i64_load_u_i64 (result i32) (i64.eq (i64.load_u/i64 (i32.const 16))
                                             (i64.const 18446744073709551615)))

  (export "f32_load_f32" $f32_load_f32)
  (func $f32_load_f32 (result f32) (f32.load/f32 (i32.const 4)))

  (export "f64_load_f64" $f64_load_f64)
  (func $f64_load_f64 (result f64) (f64.load/f64 (i32.const 8)))
)
# STDOUT:
i32_load_s_i8() = -1
i32_load_s_i16() = -1
i32_load_s_i32() = -1
i32_load_u_i8() = 255
i32_load_u_i16() = 65535
i32_load_u_i32() = -1
i64_load_s_i8() = 0
i64_load_s_i16() = 0
i64_load_s_i32() = 0
i64_load_s_i64() = 1
i64_load_u_i8() = 1
i64_load_u_i16() = 1
i64_load_u_i32() = 1
i64_load_u_i64() = 1
f32_load_f32() = 25.75
f64_load_f64() = 1023.875
