;;; EXE: test/run-d8.py
(module
  (global i32 f32 i64 f64)
  (export "store_i32" $store_i32)
  (func $store_i32 (store_global 0 (i32.const 1)))
  (export "load_i32" $load_i32)
  (func $load_i32 (result i32) (load_global 0))

  (export "store_f32" $store_f32)
  (func $store_f32 (store_global 1 (f32.const 2)))
  (export "load_f32" $load_f32)
  (func $load_f32 (result f32) (load_global 1))

  ;; v8-native-prototype currently crashes if you try to return an i64, so
  ;; we'll do a comparison against the expected value instead.
  (export "store_i64" $store_i64)
  (func $store_i64 (store_global 2 (i64.const 3)))
  (export "load_i64" $load_i64)
  (func $load_i64 (result i32) (i64.eq (load_global 2) (i64.const 3)))

  (export "store_f64" $store_f64)
  (func $store_f64 (store_global 3 (f64.const 4)))
  (export "load_f64" $load_f64)
  (func $load_f64 (result f64) (load_global 3)))
(;; STDOUT ;;;
store_i32() = undefined
load_i32() = 1
store_f32() = undefined
load_f32() = 2
store_i64() = undefined
load_i64() = 1
store_f64() = undefined
load_f64() = 4
;;; STDOUT ;;)
