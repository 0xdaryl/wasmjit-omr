struct OpInfo {
  const char* name;
  int op_type;
  int opcode;
  int type;
  int type2;
  int access;
};
%%
block, OP_BLOCK, OPCODE_BLOCK
break, OP_BREAK, OPCODE_BREAK
call, OP_CALL, OPCODE_CALL
call_indirect, OP_CALL_INDIRECT, OPCODE_CALL_INDIRECT
destruct, OP_DESTRUCT, OPCODE_INVALID
f32.abs, OP_UNARY, OPCODE_F32_ABS, TYPE_F32
f32.add, OP_BINARY, OPCODE_F32_ADD, TYPE_F32
f32.ceil, OP_UNARY, OPCODE_F32_CEIL, TYPE_F32
f32.const, OP_CONST, OPCODE_F32_CONST, TYPE_F32
f32.convert_s/i32, OP_CONVERT, OPCODE_F32_SCONVERT_I32, TYPE_F32, TYPE_I32
f32.convert_s/i64, OP_CONVERT, OPCODE_F32_SCONVERT_I64, TYPE_F32, TYPE_I64
f32.convert_u/i32, OP_CONVERT, OPCODE_F32_UCONVERT_I32, TYPE_F32, TYPE_I32
f32.convert_u/i64, OP_CONVERT, OPCODE_F32_UCONVERT_I64, TYPE_F32, TYPE_I64
f32.copysign, OP_BINARY, OPCODE_F32_COPYSIGN, TYPE_F32
f32.demote/f64, OP_CONVERT, OPCODE_F32_CONVERT_F64, TYPE_F32, TYPE_F64
f32.div, OP_BINARY, OPCODE_F32_DIV, TYPE_F32
f32.eq, OP_COMPARE, OPCODE_F32_EQ, TYPE_F32
f32.floor, OP_UNARY, OPCODE_F32_FLOOR, TYPE_F32
f32.ge, OP_COMPARE, OPCODE_F32_GE, TYPE_F32
f32.gt, OP_COMPARE, OPCODE_F32_GT, TYPE_F32
f32.le, OP_COMPARE, OPCODE_F32_LE, TYPE_F32
f32.load/f32, OP_LOAD, OPCODE_F32_LOAD_I32, TYPE_F32, MEM_TYPE_F32, 0
f32.lt, OP_COMPARE, OPCODE_F32_LT, TYPE_F32
f32.max, OP_BINARY, OPCODE_F32_MAX, TYPE_F32
f32.min, OP_BINARY, OPCODE_F32_MIN, TYPE_F32
f32.mul, OP_BINARY, OPCODE_F32_MUL, TYPE_F32
f32.nearest, OP_UNARY, OPCODE_F32_NEAREST, TYPE_F32
f32.neg, OP_UNARY, OPCODE_F32_NEG, TYPE_F32
f32.neq, OP_COMPARE, OPCODE_F32_NE, TYPE_F32
f32.reinterpret/i32, OP_CONVERT, OPCODE_F32_REINTERPRET_I32, TYPE_F32, TYPE_I32
f32.sqrt, OP_UNARY, OPCODE_F32_SQRT, TYPE_F32
f32.store/f32, OP_STORE, OPCODE_F32_STORE_I32, TYPE_F32, MEM_TYPE_F32, 0
f32.sub, OP_BINARY, OPCODE_F32_SUB, TYPE_F32
f32.switch, OP_SWITCH, OPCODE_INVALID, TYPE_F32
f32.trunc, OP_UNARY, OPCODE_F32_TRUNC, TYPE_F32
f64.abs, OP_UNARY, OPCODE_F64_ABS, TYPE_F64
f64.add, OP_BINARY, OPCODE_F64_ADD, TYPE_F64
f64.ceil, OP_UNARY, OPCODE_F64_CEIL, TYPE_F64
f64.const, OP_CONST, OPCODE_F64_CONST, TYPE_F64
f64.convert_s/i32, OP_CONVERT, OPCODE_F64_SCONVERT_I32, TYPE_F64, TYPE_I32
f64.convert_s/i64, OP_CONVERT, OPCODE_F64_SCONVERT_I64, TYPE_F64, TYPE_I64
f64.convert_u/i32, OP_CONVERT, OPCODE_F64_UCONVERT_I32, TYPE_F64, TYPE_I32
f64.convert_u/i64, OP_CONVERT, OPCODE_F64_UCONVERT_I64, TYPE_F64, TYPE_I64
f64.copysign, OP_BINARY, OPCODE_F64_COPYSIGN, TYPE_F64
f64.div, OP_BINARY, OPCODE_F64_DIV, TYPE_F64
f64.eq, OP_COMPARE, OPCODE_F64_EQ, TYPE_F64
f64.floor, OP_UNARY, OPCODE_F64_FLOOR, TYPE_F64
f64.ge, OP_COMPARE, OPCODE_F64_GE, TYPE_F64
f64.gt, OP_COMPARE, OPCODE_F64_GT, TYPE_F64
f64.le, OP_COMPARE, OPCODE_F64_LE, TYPE_F64
f64.load/f32, OP_LOAD, OPCODE_INVALID, TYPE_F64, MEM_TYPE_F32, 0
f64.load/f64, OP_LOAD, OPCODE_F64_LOAD_I32, TYPE_F64, MEM_TYPE_F64, 0
f64.lt, OP_COMPARE, OPCODE_F64_LT, TYPE_F64
f64.max, OP_BINARY, OPCODE_F64_MAX, TYPE_F64
f64.min, OP_BINARY, OPCODE_F64_MIN, TYPE_F64
f64.mul, OP_BINARY, OPCODE_F64_MUL, TYPE_F64
f64.nearest, OP_UNARY, OPCODE_F64_NEAREST, TYPE_F64
f64.neg, OP_UNARY, OPCODE_F64_NEG, TYPE_F64
f64.neq, OP_COMPARE, OPCODE_F64_NE, TYPE_F64
f64.promote/f32, OP_CONVERT, OPCODE_F64_CONVERT_F32, TYPE_F64, TYPE_F32
f64.reinterpret/i64, OP_CONVERT, OPCODE_F64_REINTERPRET_I64, TYPE_F64, TYPE_I64
f64.sqrt, OP_UNARY, OPCODE_F64_SQRT, TYPE_F64
f64.store/f32, OP_STORE, OPCODE_INVALID, TYPE_F64, MEM_TYPE_F32, 0
f64.store/f64, OP_STORE, OPCODE_F64_STORE_I32, TYPE_F64, MEM_TYPE_F64, 0
f64.sub, OP_BINARY, OPCODE_F64_SUB, TYPE_F64
f64.switch, OP_SWITCH, OPCODE_INVALID, TYPE_F64
f64.trunc, OP_UNARY, OPCODE_F64_TRUNC, TYPE_F64
get_local, OP_GET_LOCAL, OPCODE_GET_LOCAL
i32.add, OP_BINARY, OPCODE_I32_ADD, TYPE_I32
i32.and, OP_BINARY, OPCODE_I32_AND, TYPE_I32
i32.clz, OP_UNARY, OPCODE_I32_CLZ, TYPE_I32
i32.const, OP_CONST, OPCODE_I32_CONST, TYPE_I32
i32.ctz, OP_UNARY, OPCODE_I32_CTZ, TYPE_I32
i32.div_s, OP_BINARY, OPCODE_I32_SDIV, TYPE_I32
i32.div_u, OP_BINARY, OPCODE_I32_UDIV, TYPE_I32
i32.eq, OP_COMPARE, OPCODE_I32_EQ, TYPE_I32
i32.ge_s, OP_COMPARE, OPCODE_I32_SGE, TYPE_I32
i32.ge_u, OP_COMPARE, OPCODE_I32_UGE, TYPE_I32
i32.gt_s, OP_COMPARE, OPCODE_I32_SGT, TYPE_I32
i32.gt_u, OP_COMPARE, OPCODE_I32_UGT, TYPE_I32
i32.le_s, OP_COMPARE, OPCODE_I32_SLE, TYPE_I32
i32.le_u, OP_COMPARE, OPCODE_I32_ULE, TYPE_I32
i32.load/i16, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I16, 5
i32.load/i32, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I32, 6
i32.load/i8, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I8, 4
i32.load_s/i16, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I16, 5
i32.load_s/i32, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I32, 6
i32.load_s/i8, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I8, 4
i32.load_u/i16, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I16, 1
i32.load_u/i32, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I32, 2
i32.load_u/i8, OP_LOAD, OPCODE_I32_LOAD_I32, TYPE_I32, MEM_TYPE_I8, 0
i32.lt_s, OP_COMPARE, OPCODE_I32_SLT, TYPE_I32
i32.lt_u, OP_COMPARE, OPCODE_I32_ULT, TYPE_I32
i32.mul, OP_BINARY, OPCODE_I32_MUL, TYPE_I32
i32.neq, OP_COMPARE, OPCODE_I32_NE, TYPE_I32
i32.not, OP_UNARY, OPCODE_I32_NOT, TYPE_I32
i32.or, OP_BINARY, OPCODE_I32_OR, TYPE_I32
i32.popcnt, OP_UNARY, OPCODE_I32_POPCNT, TYPE_I32
i32.reinterpret/f32, OP_CONVERT, OPCODE_INVALID, TYPE_I32
i32.rem_s, OP_BINARY, OPCODE_I32_SREM, TYPE_I32
i32.rem_u, OP_BINARY, OPCODE_I32_UREM, TYPE_I32
i32.sar, OP_BINARY, OPCODE_I32_SAR, TYPE_I32
i32.shl, OP_BINARY, OPCODE_I32_SHL, TYPE_I32
i32.shr, OP_BINARY, OPCODE_I32_SHR, TYPE_I32
i32.store/i16, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I16, 5
i32.store/i32, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I32, 6
i32.store/i8, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I8, 4
i32.store_s/i16, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I16, 5
i32.store_s/i32, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I32, 6
i32.store_s/i8, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I8, 4
i32.store_u/i16, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I16, 1
i32.store_u/i32, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I32, 2
i32.store_u/i8, OP_STORE, OPCODE_I32_STORE_I32, TYPE_I32, MEM_TYPE_I8, 0
i32.sub, OP_BINARY, OPCODE_I32_SUB, TYPE_I32
i32.switch, OP_SWITCH, OPCODE_SWITCH, TYPE_I32
i32.trunc_s/f32, OP_CONVERT, OPCODE_I32_SCONVERT_F32, TYPE_I32, TYPE_F32
i32.trunc_s/f64, OP_CONVERT, OPCODE_I32_SCONVERT_F64, TYPE_I32, TYPE_F64
i32.trunc_u/f32, OP_CONVERT, OPCODE_I32_UCONVERT_F32, TYPE_I32, TYPE_F32
i32.trunc_u/f64, OP_CONVERT, OPCODE_I32_UCONVERT_F64, TYPE_I32, TYPE_F64
i32.wrap/i64, OP_CONVERT, OPCODE_I32_CONVERT_I64, TYPE_I32, TYPE_I64
i32.xor, OP_BINARY, OPCODE_I32_XOR, TYPE_I32
i64.add, OP_BINARY, OPCODE_I64_ADD, TYPE_I64
i64.and, OP_BINARY, OPCODE_I64_AND, TYPE_I64
i64.clz, OP_UNARY, OPCODE_I64_CLZ, TYPE_I64
i64.const, OP_CONST, OPCODE_I64_CONST, TYPE_I64
i64.ctz, OP_UNARY, OPCODE_I64_CTZ, TYPE_I64
i64.div_s, OP_BINARY, OPCODE_I64_SDIV, TYPE_I64
i64.div_u, OP_BINARY, OPCODE_I64_UDIV, TYPE_I64
i64.eq, OP_COMPARE, OPCODE_I64_EQ, TYPE_I64
i64.extend_s/i32, OP_CONVERT, OPCODE_I64_SCONVERT_I32, TYPE_I64, TYPE_I32
i64.extend_u/i32, OP_CONVERT, OPCODE_I64_UCONVERT_I32, TYPE_I64, TYPE_I32
i64.ge_s, OP_COMPARE, OPCODE_I64_SGE, TYPE_I64
i64.ge_u, OP_COMPARE, OPCODE_I64_UGE, TYPE_I64
i64.gt_s, OP_COMPARE, OPCODE_I64_SGT, TYPE_I64
i64.gt_u, OP_COMPARE, OPCODE_I64_UGT, TYPE_I64
i64.le_s, OP_COMPARE, OPCODE_I64_SLE, TYPE_I64
i64.le_u, OP_COMPARE, OPCODE_I64_ULE, TYPE_I64
i64.load/i16, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I16, 5
i64.load/i32, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I32, 6
i64.load/i64, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I64, 7
i64.load/i8, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I8, 4
i64.load_s/i16, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I16, 5
i64.load_s/i32, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I32, 6
i64.load_s/i64, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I64, 7
i64.load_s/i8, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I8, 4
i64.load_u/i16, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I16, 1
i64.load_u/i32, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I32, 2
i64.load_u/i64, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I64, 3
i64.load_u/i8, OP_LOAD, OPCODE_I64_LOAD_I32, TYPE_I64, MEM_TYPE_I8, 0
i64.lt_s, OP_COMPARE, OPCODE_I64_SLT, TYPE_I64
i64.lt_u, OP_COMPARE, OPCODE_I64_ULT, TYPE_I64
i64.mul, OP_BINARY, OPCODE_I64_MUL, TYPE_I64
i64.neq, OP_COMPARE, OPCODE_I64_NE, TYPE_I64
i64.or, OP_BINARY, OPCODE_I64_OR, TYPE_I64
i64.popcnt, OP_UNARY, OPCODE_I64_POPCNT, TYPE_I64
i64.reinterpret/f64, OP_CONVERT, OPCODE_INVALID, TYPE_I64
i64.rem_s, OP_BINARY, OPCODE_I64_SREM, TYPE_I64
i64.rem_u, OP_BINARY, OPCODE_I64_UREM, TYPE_I64
i64.sar, OP_BINARY, OPCODE_I64_SAR, TYPE_I64
i64.shl, OP_BINARY, OPCODE_I64_SHL, TYPE_I64
i64.shr, OP_BINARY, OPCODE_I64_SHR, TYPE_I64
i64.store/i16, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I16, 5
i64.store/i32, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I32, 6
i64.store/i64, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I64, 7
i64.store/i8, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I8, 4
i64.store_s/i16, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I16, 5
i64.store_s/i32, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I32, 6
i64.store_s/i64, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I64, 7
i64.store_s/i8, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I8, 4
i64.store_u/i16, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I16, 1
i64.store_u/i32, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I32, 2
i64.store_u/i64, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I64, 3
i64.store_u/i8, OP_STORE, OPCODE_I64_STORE_I32, TYPE_I64, MEM_TYPE_I8, 0
i64.sub, OP_BINARY, OPCODE_I64_SUB, TYPE_I64
i64.switch, OP_SWITCH, OPCODE_INVALID, TYPE_I64
i64.trunc_s/f32, OP_CONVERT, OPCODE_I64_SCONVERT_F32, TYPE_I64, TYPE_F32
i64.trunc_s/f64, OP_CONVERT, OPCODE_I64_SCONVERT_F64, TYPE_I64, TYPE_F64
i64.trunc_u/f32, OP_CONVERT, OPCODE_I64_UCONVERT_F32, TYPE_I64, TYPE_F32
i64.trunc_u/f64, OP_CONVERT, OPCODE_I64_UCONVERT_F64, TYPE_I64, TYPE_F64
i64.xor, OP_BINARY, OPCODE_I64_XOR, TYPE_I64
if, OP_IF, OPCODE_IF
label, OP_LABEL, OPCODE_INVALID
load_global, OP_LOAD_GLOBAL, OPCODE_GET_GLOBAL
loop, OP_LOOP, OPCODE_LOOP
nop, OP_NOP, OPCODE_NOP, TYPE_VOID
return, OP_RETURN, OPCODE_RETURN
set_local, OP_SET_LOCAL, OPCODE_SET_LOCAL
store_global, OP_STORE_GLOBAL, OPCODE_SET_GLOBAL
